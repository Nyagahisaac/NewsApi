{
  "version": 3,
  "file": "ngx-progressbar-core.umd.min.js",
  "sources": [
    "ng://@ngx-progressbar/core/src/services/ng-progress.service.ts",
    "ng://@ngx-progressbar/core/src/components/ng-progress-bar/ng-progress-bar.component.ts",
    "ng://@ngx-progressbar/core/src/components/ng-progress/ng-progress.component.ts"
  ],
  "sourcesContent": [
    "import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { timer } from 'rxjs/observable/timer';\r\nimport { filter, map, distinctUntilChanged, skip, takeWhile, tap, switchMap } from 'rxjs/operators';\r\n\r\nimport { NgProgressState } from '../models/ng-progress.state';\r\n\r\n/**\r\n * Keep value within the range\r\n */\r\nconst clamp = (n, min, max) => {\r\n  if (n < min) {\r\n    return min;\r\n  }\r\n  if (n > max) {\r\n    return max;\r\n  }\r\n  return n;\r\n};\r\n\r\n@Injectable()\r\nexport class NgProgress {\r\n\r\n  /** Initial state */\r\n  initState: NgProgressState = {\r\n    active: false,\r\n    value: 0\r\n  };\r\n\r\n  /** Progress state */\r\n  state$ = new BehaviorSubject(this.initState);\r\n\r\n  /** Trickling stream */\r\n  trickling$ = new Subject();\r\n\r\n  progress = 0;\r\n  maximum = 1;\r\n  minimum = 0.08;\r\n  speed = 200;\r\n  trickleSpeed = 300;\r\n\r\n  /** Is progress started */\r\n  get isStarted(): boolean {\r\n    return this.progress > 0 && this.progress < this.maximum;\r\n  }\r\n\r\n  /** Progress start event */\r\n  get started(): Observable<boolean> {\r\n    return this.state$.pipe(\r\n      map((state: NgProgressState) => state.active),\r\n      distinctUntilChanged(),\r\n      filter(active => active)\r\n    );\r\n  }\r\n\r\n  /** Progress ended event */\r\n  get ended(): Observable<boolean> {\r\n    return this.state$.pipe(\r\n      map((state: NgProgressState) => state.active),\r\n      distinctUntilChanged(),\r\n      filter(active => !active),\r\n      skip(1)\r\n    );\r\n  }\r\n\r\n  constructor() {\r\n\r\n    this.trickling$.pipe(\r\n      switchMap(() => timer(0, this.trickleSpeed).pipe(\r\n        takeWhile(() => this.isStarted),\r\n        tap(() => this.inc()))\r\n      )\r\n    ).subscribe();\r\n  }\r\n\r\n  /** Start */\r\n  start() {\r\n    if (!this.isStarted) {\r\n      this.set(this.minimum);\r\n    }\r\n    this.trickling$.next();\r\n  }\r\n\r\n  /** Done */\r\n  done() {\r\n    /** if started, complete the progress */\r\n    if (this.isStarted) {\r\n      this.set(.3 + .5 * Math.random());\r\n      this.set(this.maximum);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Increment the progress\r\n   * @param amount\r\n   */\r\n  inc(amount?: number) {\r\n    let n = this.progress;\r\n    /** if it hasn't start, start */\r\n    if (!this.isStarted) {\r\n      this.start();\r\n    } else {\r\n      if (typeof amount !== 'number') {\r\n        if (n >= 0 && n < 0.2) {\r\n          amount = 0.1;\r\n        } else if (n >= 0.2 && n < 0.5) {\r\n          amount = 0.04;\r\n        } else if (n >= 0.5 && n < 0.8) {\r\n          amount = 0.02;\r\n        } else if (n >= 0.8 && n < 0.99) {\r\n          amount = 0.005;\r\n        } else {\r\n          amount = 0;\r\n        }\r\n      }\r\n      n = clamp(n + amount, 0, 0.994);\r\n      this.set(n);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the progress\r\n   * @param n - Progress value\r\n   */\r\n  set(n: number) {\r\n    this.progress = clamp(n, this.minimum, this.maximum);\r\n    this.updateState(this.progress, true);\r\n\r\n    /** if progress completed */\r\n    if (n === this.maximum) {\r\n      const hide = () => {\r\n        /**\r\n         *  reset the progress\r\n         *  Keep it { 0, false } to fadeOut progress-bar after complete\r\n         */\r\n        if (this.progress >= this.maximum) {\r\n          this.progress = 0;\r\n          this.updateState(this.progress, false);\r\n        }\r\n      };\r\n      const complete = () => {\r\n        /**\r\n         * complete the progress\r\n         * { 1, false } to complete progress-bar before hiding\r\n         */\r\n        if (this.progress >= this.maximum) {\r\n          this.updateState(this.progress, false);\r\n          setTimeout(hide, this.speed);\r\n        }\r\n      };\r\n      setTimeout(complete, this.speed);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update progress state\r\n   * @param progress - Progress value\r\n   * @param isActive - Progress active\r\n   */\r\n  private updateState(progress: number, isActive: boolean) {\r\n    this.state$.next({\r\n      active: isActive,\r\n      value: progress\r\n    });\r\n  }\r\n}\r\n",
    "import { Component, Input, ChangeDetectionStrategy, OnInit } from '@angular/core';\r\nimport { NgProgressState } from '../../models/ng-progress.state';\r\nimport { NgProgress } from '../../services/ng-progress.service';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { map } from 'rxjs/operators';\r\n\r\nexport interface ProgressBarState {\r\n  containerClasses: any;\r\n  progressStyles: any;\r\n  meteorStyles?: any;\r\n  spinnerClasses?: any;\r\n  spinnerStyles?: any;\r\n}\r\n\r\n@Component({\r\n  selector: 'ng-progress-bar',\r\n  template: `<div class=\"ng-progress\" *ngIf=\"state$ | async; let state\" [ngClass]=\"state.containerClasses\">\r\n  <div class=\"bar\" [ngStyle]=\"state.progressStyles\">\r\n    <div *ngIf=\"meteor\" class=\"meteor\" [ngStyle]=\"state.meteorStyles\"></div>\r\n  </div>\r\n  <div *ngIf=\"spinner\" class=\"spinner {{state.spinnerClasses}}\">\r\n    <div class=\"spinner-icon\" [ngStyle]=\"state.spinnerStyles\"></div>\r\n  </div> \r\n</div>\r\n`,\r\n  styles: [`.ng-progress {\n  z-index: 999999;\n  top: 0;\n  left: 0;\n  width: 100%;\n  position: fixed;\n  zoom: 1;\n  filter: alpha(opacity=0);\n  opacity: 0;\n  -webkit-transition: opacity 200ms linear;\n  transition: opacity 200ms linear; }\n\n.active {\n  filter: alpha(opacity=100);\n  opacity: 1;\n  -webkit-transition: none;\n  transition: none; }\n\n.bar {\n  position: absolute;\n  width: 100%;\n  height: 2px; }\n\n.thick .bar {\n  height: 3px; }\n\n.meteor {\n  display: block;\n  position: absolute;\n  right: 0;\n  top: -3px;\n  width: 100px;\n  height: 100%;\n  opacity: 1.0; }\n\n.thick .meteor {\n  top: -4px; }\n\n.thick .spinner-icon {\n  width: 24px;\n  height: 24px;\n  border: solid 3px transparent; }\n\n.spinner {\n  display: block;\n  position: fixed;\n  z-index: 1031;\n  top: 15px;\n  right: 15px; }\n  .spinner.spinner-left {\n    left: 15px;\n    right: unset; }\n\n.spinner-icon {\n  width: 18px;\n  height: 18px;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  border: solid 2px transparent;\n  border-radius: 50%;\n  -webkit-animation: nprogress-spinner 400ms linear infinite;\n          animation: nprogress-spinner 400ms linear infinite; }\n\n.anti-clockwise .spinner-icon {\n  animation-direction: reverse; }\n\n@-webkit-keyframes nprogress-spinner {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n\n@keyframes nprogress-spinner {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n`],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgProgressBarComponent implements OnInit {\r\n\r\n  @Input() ease: string;\r\n  @Input() speed: number;\r\n  @Input() meteor: boolean;\r\n  @Input() spinner: boolean;\r\n  @Input() spinnerPosition: string;\r\n  @Input() direction: string;\r\n  @Input() thick: string;\r\n  @Input() color: string;\r\n\r\n  state$: Observable<ProgressBarState>;\r\n\r\n  constructor(public progress: NgProgress) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.state$ = this.progress.state$.pipe(\r\n      map((state: NgProgressState) => ({\r\n        containerClasses: this.containerClasses(state),\r\n        progressStyles: this.progressBarStyles(state),\r\n        spinnerClasses: this.spinnerClasses(),\r\n        spinnerStyles: this.spinnerStyles(),\r\n        meteorStyles: this.meteor ? this.meteorStyles() : null\r\n      })));\r\n  }\r\n\r\n  private containerClasses(state: NgProgressState) {\r\n    return {\r\n      active: state.active,\r\n      thick: this.thick\r\n    };\r\n  }\r\n\r\n  private progressBarStyles(state: NgProgressState) {\r\n\r\n    const n = (!state.value) ? directionSwitcher[this.direction].bar : this.toPercentage(state.value);\r\n    const translate3d = `translate3d(${n}%,0,0)`;\r\n    return {\r\n      transition: `all ${this.speed}ms ${this.ease}`,\r\n      background: this.color,\r\n      msTransform: translate3d,\r\n      webkitTransform: translate3d,\r\n      transform: translate3d\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Styles for progressbar tail\r\n   */\r\n  private meteorStyles() {\r\n    return {\r\n      boxShadow: `0 0 10px ${this.color}, 0 0 5px ${this.color}`,\r\n      left: directionSwitcher[this.direction].meteorLeft,\r\n      transform: directionSwitcher[this.direction].meteorRotate(this.thick),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Convert number to percent\r\n   * @param n - State value\r\n   */\r\n  private toPercentage(n: number) {\r\n    return directionSwitcher[this.direction].toPercentage(n) * 100;\r\n  }\r\n\r\n  /**\r\n   * Spinner direction\r\n   */\r\n  private spinnerClasses() {\r\n    return directionSwitcher[this.direction].spinnerClass + ' spinner-' + this.spinnerPosition;\r\n  }\r\n\r\n  /**\r\n   * Spinner styles\r\n   */\r\n  private spinnerStyles() {\r\n    return {\r\n      borderTopColor: this.color,\r\n      borderLeftColor: this.color\r\n    };\r\n  }\r\n\r\n}\r\n\r\nconst directionSwitcher = {\r\n  leftToRightIncreased: {\r\n    bar: -100,\r\n    toPercentage: n => -1 + n,\r\n    spinnerClass: 'clockwise',\r\n    meteorRotate: thick => `rotate(${thick ? 4 : 3}deg)`,\r\n    meteorLeft: 'unset'\r\n  },\r\n  leftToRightReduced: {\r\n    bar: 0,\r\n    toPercentage: n => -n,\r\n    spinnerClass: 'anti-clockwise',\r\n    meteorRotate: thick => `rotate(${thick ? 4 : 3}deg)`,\r\n    meteorLeft: 'unset'\r\n  },\r\n  rightToLeftIncreased: {\r\n    bar: 100,\r\n    toPercentage: n => 1 - n,\r\n    spinnerClass: 'anti-clockwise',\r\n    meteorRotate: thick => `rotate(${thick ? -4 : -3}deg)`,\r\n    meteorLeft: 0\r\n  },\r\n  rightToLeftReduced: {\r\n    bar: 0,\r\n    toPercentage: (n) => n,\r\n    spinnerClass: 'clockwise',\r\n    meteorRotate: thick => `rotate(${thick ? -4 : -3}deg)`,\r\n    meteorLeft: 0\r\n  }\r\n};\r\n",
    "import { Component, Input, ChangeDetectionStrategy, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { NgProgress } from '../../services/ng-progress.service';\r\n\r\n@Component({\r\n  selector: 'ng-progress',\r\n  template: `<ng-progress-bar\r\n    [speed]=\"speed\"\r\n    [ease]=\"ease\"\r\n    [meteor]=\"meteor\"\r\n    [spinner]=\"spinner\"\r\n    [spinnerPosition]=\"spinnerPosition\"\r\n    [direction]=\"direction\"\r\n    [color]=\"color\"\r\n    [thick]=\"thick\"\r\n></ng-progress-bar>`,\r\n  styles: [`:host {\n  z-index: 999999;\n  pointer-events: none;\n  position: relative; }\n`],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class NgProgressComponent implements OnChanges {\r\n\r\n  /** Progress options  */\r\n  @Input() ease = 'linear';\r\n  @Input() meteor = true;\r\n  @Input() spinner = true;\r\n  @Input() spinnerPosition = 'right';\r\n  @Input() direction = 'leftToRightIncreased';\r\n  @Input() color = '#1B95E0';\r\n  @Input() thick = false;\r\n  @Input() maximum = 1;\r\n  @Input() minimum = 0.08;\r\n  @Input() speed = 200;\r\n  @Input() trickleSpeed = 300;\r\n\r\n  /** Start/Stop Progressbar */\r\n  @Input('toggle') set toggleProgressbar(toggle: boolean) {\r\n    toggle ? this.progress.start() : this.progress.done();\r\n  }\r\n\r\n  constructor(public progress: NgProgress) {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n\r\n    const minChng = changes.minimum;\r\n    const maxChng = changes.maximum;\r\n    const spdChng = changes.speed;\r\n    const tklSpdChng = changes.trickleSpeed;\r\n\r\n    if (minChng) {\r\n      if (typeof minChng.currentValue !== 'undefined' && minChng.currentValue !== minChng.previousValue) {\r\n        if (minChng.currentValue < 0 || minChng.currentValue > 1) {\r\n          throw new Error('Input [minimum] must be between 0 and 1');\r\n        } else {\r\n          this.progress.minimum = minChng.currentValue;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (maxChng) {\r\n      if (typeof maxChng.currentValue !== 'undefined' && maxChng.currentValue !== maxChng.previousValue) {\r\n        if (maxChng.currentValue < 0 || maxChng.currentValue > 1) {\r\n          throw new Error('Input [maximum] must be between 0 and 1');\r\n        } else {\r\n          this.progress.maximum = maxChng.currentValue;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (spdChng) {\r\n      if (typeof spdChng.currentValue !== 'undefined' && spdChng.currentValue !== spdChng.previousValue) {\r\n        this.progress.speed = spdChng.currentValue;\r\n      }\r\n    }\r\n\r\n    if (tklSpdChng) {\r\n      if (typeof tklSpdChng.currentValue !== 'undefined' && tklSpdChng.currentValue !== tklSpdChng.previousValue) {\r\n        this.progress.trickleSpeed = tklSpdChng.currentValue;\r\n      }\r\n    }\r\n  }\r\n}\r\n"
  ],
  "names": [
    "n",
    "min",
    "max",
    "NgProgress",
    "_this",
    "this",
    "initState",
    "active",
    "value",
    "state$",
    "BehaviorSubject",
    "trickling$",
    "Subject",
    "progress",
    "maximum",
    "minimum",
    "speed",
    "trickleSpeed",
    "pipe",
    "switchMap",
    "timer$1",
    "takeWhile",
    "isStarted",
    "tap",
    "inc",
    "subscribe",
    "get",
    "Object",
    "defineProperty",
    "prototype",
    "enumerable",
    "configurable",
    "map",
    "state",
    "distinctUntilChanged",
    "filter",
    "skip",
    "start",
    "set",
    "next",
    "done",
    "Math",
    "random",
    "amount",
    "clamp",
    "updateState",
    "setTimeout",
    "hide_1",
    "decorators",
    "ctorParameters",
    "NgProgressBarComponent",
    "containerClasses",
    "progressStyles",
    "progressBarStyles",
    "spinnerClasses",
    "thick",
    "translate3d",
    "transition",
    "ease",
    "background",
    "color",
    "msTransform",
    "webkitTransform",
    "meteorStyles",
    "directionSwitcher",
    "direction",
    "toPercentage",
    "NgProgressComponent",
    "toggle",
    "ngOnChanges",
    "changes",
    "minChng",
    "maxChng",
    "spdChng",
    "tklSpdChng",
    "currentValue",
    "previousValue",
    "Error",
    "type",
    "Component",
    "args",
    "changeDetection",
    "ChangeDetectionStrategy",
    "OnPush",
    "propDecorators",
    "Input",
    "meteor",
    "spinner",
    "spinnerPosition",
    "NgProgressModule",
    "forRoot",
    "ngModule",
    "providers",
    "NgModule",
    "declarations",
    "exports",
    "imports",
    "CommonModule"
  ],
  "mappings": "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"
}
