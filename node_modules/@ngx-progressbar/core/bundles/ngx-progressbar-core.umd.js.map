{
  "version": 3,
  "file": "ngx-progressbar-core.umd.js",
  "sources": [
    "ng://@ngx-progressbar/core/src/components/ng-progress/ng-progress.component.ts",
    "ng://@ngx-progressbar/core/src/components/ng-progress-bar/ng-progress-bar.component.ts",
    "ng://@ngx-progressbar/core/src/services/ng-progress.service.ts"
  ],
  "sourcesContent": [
    "import { Component, Input, ChangeDetectionStrategy, OnChanges, SimpleChanges } from '@angular/core';\r\nimport { NgProgress } from '../../services/ng-progress.service';\r\n\r\n@Component({\r\n  selector: 'ng-progress',\r\n  template: `<ng-progress-bar\r\n    [speed]=\"speed\"\r\n    [ease]=\"ease\"\r\n    [meteor]=\"meteor\"\r\n    [spinner]=\"spinner\"\r\n    [spinnerPosition]=\"spinnerPosition\"\r\n    [direction]=\"direction\"\r\n    [color]=\"color\"\r\n    [thick]=\"thick\"\r\n></ng-progress-bar>`,\r\n  styles: [`:host {\n  z-index: 999999;\n  pointer-events: none;\n  position: relative; }\n`],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\n\r\nexport class NgProgressComponent implements OnChanges {\r\n\r\n  /** Progress options  */\r\n  @Input() ease = 'linear';\r\n  @Input() meteor = true;\r\n  @Input() spinner = true;\r\n  @Input() spinnerPosition = 'right';\r\n  @Input() direction = 'leftToRightIncreased';\r\n  @Input() color = '#1B95E0';\r\n  @Input() thick = false;\r\n  @Input() maximum = 1;\r\n  @Input() minimum = 0.08;\r\n  @Input() speed = 200;\r\n  @Input() trickleSpeed = 300;\r\n\r\n  /** Start/Stop Progressbar */\r\n  @Input('toggle') set toggleProgressbar(toggle: boolean) {\r\n    toggle ? this.progress.start() : this.progress.done();\r\n  }\r\n\r\n  constructor(public progress: NgProgress) {\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n\r\n    const minChng = changes.minimum;\r\n    const maxChng = changes.maximum;\r\n    const spdChng = changes.speed;\r\n    const tklSpdChng = changes.trickleSpeed;\r\n\r\n    if (minChng) {\r\n      if (typeof minChng.currentValue !== 'undefined' && minChng.currentValue !== minChng.previousValue) {\r\n        if (minChng.currentValue < 0 || minChng.currentValue > 1) {\r\n          throw new Error('Input [minimum] must be between 0 and 1');\r\n        } else {\r\n          this.progress.minimum = minChng.currentValue;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (maxChng) {\r\n      if (typeof maxChng.currentValue !== 'undefined' && maxChng.currentValue !== maxChng.previousValue) {\r\n        if (maxChng.currentValue < 0 || maxChng.currentValue > 1) {\r\n          throw new Error('Input [maximum] must be between 0 and 1');\r\n        } else {\r\n          this.progress.maximum = maxChng.currentValue;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (spdChng) {\r\n      if (typeof spdChng.currentValue !== 'undefined' && spdChng.currentValue !== spdChng.previousValue) {\r\n        this.progress.speed = spdChng.currentValue;\r\n      }\r\n    }\r\n\r\n    if (tklSpdChng) {\r\n      if (typeof tklSpdChng.currentValue !== 'undefined' && tklSpdChng.currentValue !== tklSpdChng.previousValue) {\r\n        this.progress.trickleSpeed = tklSpdChng.currentValue;\r\n      }\r\n    }\r\n  }\r\n}\r\n",
    "import { Component, Input, ChangeDetectionStrategy, OnInit } from '@angular/core';\r\nimport { NgProgressState } from '../../models/ng-progress.state';\r\nimport { NgProgress } from '../../services/ng-progress.service';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { map } from 'rxjs/operators';\r\n\r\nexport interface ProgressBarState {\r\n  containerClasses: any;\r\n  progressStyles: any;\r\n  meteorStyles?: any;\r\n  spinnerClasses?: any;\r\n  spinnerStyles?: any;\r\n}\r\n\r\n@Component({\r\n  selector: 'ng-progress-bar',\r\n  template: `<div class=\"ng-progress\" *ngIf=\"state$ | async; let state\" [ngClass]=\"state.containerClasses\">\r\n  <div class=\"bar\" [ngStyle]=\"state.progressStyles\">\r\n    <div *ngIf=\"meteor\" class=\"meteor\" [ngStyle]=\"state.meteorStyles\"></div>\r\n  </div>\r\n  <div *ngIf=\"spinner\" class=\"spinner {{state.spinnerClasses}}\">\r\n    <div class=\"spinner-icon\" [ngStyle]=\"state.spinnerStyles\"></div>\r\n  </div> \r\n</div>\r\n`,\r\n  styles: [`.ng-progress {\n  z-index: 999999;\n  top: 0;\n  left: 0;\n  width: 100%;\n  position: fixed;\n  zoom: 1;\n  filter: alpha(opacity=0);\n  opacity: 0;\n  -webkit-transition: opacity 200ms linear;\n  transition: opacity 200ms linear; }\n\n.active {\n  filter: alpha(opacity=100);\n  opacity: 1;\n  -webkit-transition: none;\n  transition: none; }\n\n.bar {\n  position: absolute;\n  width: 100%;\n  height: 2px; }\n\n.thick .bar {\n  height: 3px; }\n\n.meteor {\n  display: block;\n  position: absolute;\n  right: 0;\n  top: -3px;\n  width: 100px;\n  height: 100%;\n  opacity: 1.0; }\n\n.thick .meteor {\n  top: -4px; }\n\n.thick .spinner-icon {\n  width: 24px;\n  height: 24px;\n  border: solid 3px transparent; }\n\n.spinner {\n  display: block;\n  position: fixed;\n  z-index: 1031;\n  top: 15px;\n  right: 15px; }\n  .spinner.spinner-left {\n    left: 15px;\n    right: unset; }\n\n.spinner-icon {\n  width: 18px;\n  height: 18px;\n  -webkit-box-sizing: border-box;\n          box-sizing: border-box;\n  border: solid 2px transparent;\n  border-radius: 50%;\n  -webkit-animation: nprogress-spinner 400ms linear infinite;\n          animation: nprogress-spinner 400ms linear infinite; }\n\n.anti-clockwise .spinner-icon {\n  animation-direction: reverse; }\n\n@-webkit-keyframes nprogress-spinner {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n\n@keyframes nprogress-spinner {\n  0% {\n    -webkit-transform: rotate(0deg);\n            transform: rotate(0deg); }\n  100% {\n    -webkit-transform: rotate(360deg);\n            transform: rotate(360deg); } }\n`],\r\n  changeDetection: ChangeDetectionStrategy.OnPush\r\n})\r\nexport class NgProgressBarComponent implements OnInit {\r\n\r\n  @Input() ease: string;\r\n  @Input() speed: number;\r\n  @Input() meteor: boolean;\r\n  @Input() spinner: boolean;\r\n  @Input() spinnerPosition: string;\r\n  @Input() direction: string;\r\n  @Input() thick: string;\r\n  @Input() color: string;\r\n\r\n  state$: Observable<ProgressBarState>;\r\n\r\n  constructor(public progress: NgProgress) {\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.state$ = this.progress.state$.pipe(\r\n      map((state: NgProgressState) => ({\r\n        containerClasses: this.containerClasses(state),\r\n        progressStyles: this.progressBarStyles(state),\r\n        spinnerClasses: this.spinnerClasses(),\r\n        spinnerStyles: this.spinnerStyles(),\r\n        meteorStyles: this.meteor ? this.meteorStyles() : null\r\n      })));\r\n  }\r\n\r\n  private containerClasses(state: NgProgressState) {\r\n    return {\r\n      active: state.active,\r\n      thick: this.thick\r\n    };\r\n  }\r\n\r\n  private progressBarStyles(state: NgProgressState) {\r\n\r\n    const n = (!state.value) ? directionSwitcher[this.direction].bar : this.toPercentage(state.value);\r\n    const translate3d = `translate3d(${n}%,0,0)`;\r\n    return {\r\n      transition: `all ${this.speed}ms ${this.ease}`,\r\n      background: this.color,\r\n      msTransform: translate3d,\r\n      webkitTransform: translate3d,\r\n      transform: translate3d\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Styles for progressbar tail\r\n   */\r\n  private meteorStyles() {\r\n    return {\r\n      boxShadow: `0 0 10px ${this.color}, 0 0 5px ${this.color}`,\r\n      left: directionSwitcher[this.direction].meteorLeft,\r\n      transform: directionSwitcher[this.direction].meteorRotate(this.thick),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Convert number to percent\r\n   * @param n - State value\r\n   */\r\n  private toPercentage(n: number) {\r\n    return directionSwitcher[this.direction].toPercentage(n) * 100;\r\n  }\r\n\r\n  /**\r\n   * Spinner direction\r\n   */\r\n  private spinnerClasses() {\r\n    return directionSwitcher[this.direction].spinnerClass + ' spinner-' + this.spinnerPosition;\r\n  }\r\n\r\n  /**\r\n   * Spinner styles\r\n   */\r\n  private spinnerStyles() {\r\n    return {\r\n      borderTopColor: this.color,\r\n      borderLeftColor: this.color\r\n    };\r\n  }\r\n\r\n}\r\n\r\nconst directionSwitcher = {\r\n  leftToRightIncreased: {\r\n    bar: -100,\r\n    toPercentage: n => -1 + n,\r\n    spinnerClass: 'clockwise',\r\n    meteorRotate: thick => `rotate(${thick ? 4 : 3}deg)`,\r\n    meteorLeft: 'unset'\r\n  },\r\n  leftToRightReduced: {\r\n    bar: 0,\r\n    toPercentage: n => -n,\r\n    spinnerClass: 'anti-clockwise',\r\n    meteorRotate: thick => `rotate(${thick ? 4 : 3}deg)`,\r\n    meteorLeft: 'unset'\r\n  },\r\n  rightToLeftIncreased: {\r\n    bar: 100,\r\n    toPercentage: n => 1 - n,\r\n    spinnerClass: 'anti-clockwise',\r\n    meteorRotate: thick => `rotate(${thick ? -4 : -3}deg)`,\r\n    meteorLeft: 0\r\n  },\r\n  rightToLeftReduced: {\r\n    bar: 0,\r\n    toPercentage: (n) => n,\r\n    spinnerClass: 'clockwise',\r\n    meteorRotate: thick => `rotate(${thick ? -4 : -3}deg)`,\r\n    meteorLeft: 0\r\n  }\r\n};\r\n",
    "import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs/Subject';\r\nimport { BehaviorSubject } from 'rxjs/BehaviorSubject';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport { timer } from 'rxjs/observable/timer';\r\nimport { filter, map, distinctUntilChanged, skip, takeWhile, tap, switchMap } from 'rxjs/operators';\r\n\r\nimport { NgProgressState } from '../models/ng-progress.state';\r\n\r\n/**\r\n * Keep value within the range\r\n */\r\nconst clamp = (n, min, max) => {\r\n  if (n < min) {\r\n    return min;\r\n  }\r\n  if (n > max) {\r\n    return max;\r\n  }\r\n  return n;\r\n};\r\n\r\n@Injectable()\r\nexport class NgProgress {\r\n\r\n  /** Initial state */\r\n  initState: NgProgressState = {\r\n    active: false,\r\n    value: 0\r\n  };\r\n\r\n  /** Progress state */\r\n  state$ = new BehaviorSubject(this.initState);\r\n\r\n  /** Trickling stream */\r\n  trickling$ = new Subject();\r\n\r\n  progress = 0;\r\n  maximum = 1;\r\n  minimum = 0.08;\r\n  speed = 200;\r\n  trickleSpeed = 300;\r\n\r\n  /** Is progress started */\r\n  get isStarted(): boolean {\r\n    return this.progress > 0 && this.progress < this.maximum;\r\n  }\r\n\r\n  /** Progress start event */\r\n  get started(): Observable<boolean> {\r\n    return this.state$.pipe(\r\n      map((state: NgProgressState) => state.active),\r\n      distinctUntilChanged(),\r\n      filter(active => active)\r\n    );\r\n  }\r\n\r\n  /** Progress ended event */\r\n  get ended(): Observable<boolean> {\r\n    return this.state$.pipe(\r\n      map((state: NgProgressState) => state.active),\r\n      distinctUntilChanged(),\r\n      filter(active => !active),\r\n      skip(1)\r\n    );\r\n  }\r\n\r\n  constructor() {\r\n\r\n    this.trickling$.pipe(\r\n      switchMap(() => timer(0, this.trickleSpeed).pipe(\r\n        takeWhile(() => this.isStarted),\r\n        tap(() => this.inc()))\r\n      )\r\n    ).subscribe();\r\n  }\r\n\r\n  /** Start */\r\n  start() {\r\n    if (!this.isStarted) {\r\n      this.set(this.minimum);\r\n    }\r\n    this.trickling$.next();\r\n  }\r\n\r\n  /** Done */\r\n  done() {\r\n    /** if started, complete the progress */\r\n    if (this.isStarted) {\r\n      this.set(.3 + .5 * Math.random());\r\n      this.set(this.maximum);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Increment the progress\r\n   * @param amount\r\n   */\r\n  inc(amount?: number) {\r\n    let n = this.progress;\r\n    /** if it hasn't start, start */\r\n    if (!this.isStarted) {\r\n      this.start();\r\n    } else {\r\n      if (typeof amount !== 'number') {\r\n        if (n >= 0 && n < 0.2) {\r\n          amount = 0.1;\r\n        } else if (n >= 0.2 && n < 0.5) {\r\n          amount = 0.04;\r\n        } else if (n >= 0.5 && n < 0.8) {\r\n          amount = 0.02;\r\n        } else if (n >= 0.8 && n < 0.99) {\r\n          amount = 0.005;\r\n        } else {\r\n          amount = 0;\r\n        }\r\n      }\r\n      n = clamp(n + amount, 0, 0.994);\r\n      this.set(n);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the progress\r\n   * @param n - Progress value\r\n   */\r\n  set(n: number) {\r\n    this.progress = clamp(n, this.minimum, this.maximum);\r\n    this.updateState(this.progress, true);\r\n\r\n    /** if progress completed */\r\n    if (n === this.maximum) {\r\n      const hide = () => {\r\n        /**\r\n         *  reset the progress\r\n         *  Keep it { 0, false } to fadeOut progress-bar after complete\r\n         */\r\n        if (this.progress >= this.maximum) {\r\n          this.progress = 0;\r\n          this.updateState(this.progress, false);\r\n        }\r\n      };\r\n      const complete = () => {\r\n        /**\r\n         * complete the progress\r\n         * { 1, false } to complete progress-bar before hiding\r\n         */\r\n        if (this.progress >= this.maximum) {\r\n          this.updateState(this.progress, false);\r\n          setTimeout(hide, this.speed);\r\n        }\r\n      };\r\n      setTimeout(complete, this.speed);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update progress state\r\n   * @param progress - Progress value\r\n   * @param isActive - Progress active\r\n   */\r\n  private updateState(progress: number, isActive: boolean) {\r\n    this.state$.next({\r\n      active: isActive,\r\n      value: progress\r\n    });\r\n  }\r\n}\r\n"
  ],
  "names": [
    "CommonModule",
    "NgModule",
    "Input",
    "ChangeDetectionStrategy",
    "Component",
    "map",
    "distinctUntilChanged",
    "filter",
    "skip",
    "switchMap",
    "timer$1",
    "takeWhile",
    "tap",
    "Subject",
    "BehaviorSubject"
  ],
  "mappings": "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"
}
